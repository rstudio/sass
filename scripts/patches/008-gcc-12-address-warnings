Avoids some warning messages from gcc-12 that CRAN doesn't like. Example:
src/lexer.hpp:89:15: warning: the address of ‘Sass::Constants::warn_kwd’ will never be NULL [-Waddress]

Basically the compiler statically knows whether the str is NULL, and doesn't like
there being code that checks. Adding a template specialization for the null case
lets us remove the check.


diff --git a/src/libsass/src/lexer.hpp b/src/libsass/src/lexer.hpp
index 360ed22..e4091f4 100644
--- a/src/libsass/src/lexer.hpp
+++ b/src/libsass/src/lexer.hpp
@@ -86,7 +86,6 @@ namespace Sass {
     // Regex equivalent: /(?:literal)/
     template <const char* str>
     const char* exactly(const char* src) {
-      if (str == NULL) return 0;
       const char* pre = str;
       if (src == NULL) return 0;
       // there is a small chance that the search string
@@ -98,6 +97,11 @@ namespace Sass {
       return *pre == 0 ? src : 0;
     }
 
+    template <>
+    inline const char* exactly<nullptr>(const char* src) {
+      return 0;
+    }
+
 
     // Match a single character literal.
     // Regex equivalent: /(?:x)/i
@@ -112,7 +116,6 @@ namespace Sass {
     // only define lower case alpha chars
     template <const char* str>
     const char* insensitive(const char* src) {
-      if (str == NULL) return 0;
       const char* pre = str;
       if (src == NULL) return 0;
       // there is a small chance that the search string
@@ -124,6 +127,11 @@ namespace Sass {
       return *pre == 0 ? src : 0;
     }
 
+    template <>
+    inline const char* insensitive<nullptr>(const char* src) {
+      return 0;
+    }
+
     // Match for members of char class.
     // Regex equivalent: /[axy]/
     template <const char* char_class>
